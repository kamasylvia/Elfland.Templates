{
  "$schema": "http://json.schemastore.org/template",
  "author": "Kamasylvia",
  "generatorVersions": "[1.0.0.0-*)",
  "classifications": [
    "Dapr"
  ],
  "identity": "Elfland.Dapr",
  "name": "Elfland templates: Dapr client and server.",
  "shortName": "elfdapr",
  "sourceName": "Elfland.Dapr",
  "tags": {
    "language": "C#",
    "type": "project"
  },
  "sources": [
    {
      "modifiers": [
        {
          "condition": "(!grpcServer) && (!grpcClientServer)",
          "exclude": [
            "Services/GrpcService.cs"
          ]
        },
        {
          "condition": "(disableGrpc) || (!protos)",
          "exclude": [
            "Protos/**/*"
          ]
        },
        {
          "condition": "(!components)",
          "exclude": [
            "dapr/**/*"
          ]
        }
      ]
    }
  ],
  "symbols": {
    "db": {
      "type": "parameter",
      "datatype": "choice",
      "description": "Choose a database provider for the project.",
      "defaultValue": "postgres",
      "choices": [
        {
          "choice": "mssql",
          "description": "MS SQL Server"
        },
        {
          "choice": "mysql",
          "description": "MySQL"
        },
        {
          "choice": "postgres",
          "description": "PostgreSQL"
        },
        {
          "choice": "sqlite",
          "description": "SQLite"
        }
      ]
    },
    "mssql": {
      "type": "computed",
      "value": "(db == \"mssql\")"
    },
    "mysql": {
      "type": "computed",
      "value": "(db == \"mysql\")"
    },
    "postgres": {
      "type": "computed",
      "value": "(db == \"postgres\")"
    },
    "sqlite": {
      "type": "computed",
      "value": "(db == \"sqlite\")"
    },
    "grpc": {
      "type": "parameter",
      "datatype": "choice",
      "description": "Add gRPC configurations.",
      "defaultValue": "disable",
      "choices": [
        {
          "choice": "client",
          "description": "gRPC client"
        },
        {
          "choice": "server",
          "description": "gRPC server"
        },
        {
          "choice": "clientServer",
          "description": "gRPC client and server"
        },
        {
          "choice": "disable",
          "description": "Disable gRPC."
        }
      ]
    },
    "grpcClient": {
      "type": "computed",
      "value": "(grpc) == \"client\""
    },
    "grpcServer": {
      "type": "computed",
      "value": "(grpc) == \"server\""
    },
    "grpcClientServer": {
      "type": "computed",
      "value": "(grpc) == \"clientServer\""
    },
    "disableGrpc": {
      "type": "computed",
      "value": "(grpc) == \"disable\""
    },
    "auth": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Add authorization middleware.",
      "defaultValue": "true"
    },
    "kestrelHttpPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the HTTP endpoint in launchSettings.json."
    },
    "kestrelHttpPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "low": 5000,
        "high": 5300
      }
    },
    "kestrelHttpPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "kestrelHttpPort",
        "fallbackVariableName": "kestrelHttpPortGenerated"
      },
      "replaces": "5000"
    },
    "kestrelHttpsPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the HTTPS endpoint in launchSettings.json. This option is only applicable when the parameter no-https is not used (no-https will be ignored if either IndividualAuth or OrganizationalAuth is used)."
    },
    "kestrelHttpsPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "low": 7000,
        "high": 7300
      }
    },
    "kestrelHttpsPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "kestrelHttpsPort",
        "fallbackVariableName": "kestrelHttpsPortGenerated"
      },
      "replaces": "5001"
    },
    "https": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "description": "Whether to turn on HTTPS."
    },
    "skipRestore": {
      "type": "parameter",
      "datatype": "bool",
      "description": "If specified, skips the automatic restore of the project on create.",
      "defaultValue": "false"
    },
    "git": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Whether to initialize the project as a git repo on create.",
      "defaultValue": "false"
    },
    "ef": {
      "type": "parameter",
      "datatype": "bool",
      "description": "If specified, automatic install the Entity Framework Core NuGet package.",
      "defaultValue": "false"
    },
    "formatter": {
      "type": "parameter",
      "datatype": "bool",
      "description": "If specified, automatic install the CSharpier NuGet package.",
      "defaultValue": "false"
    },
    "components": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Whether to include a Dapr components folder.",
      "defaultValue": "false"
    },
    "protos": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Whether to include a gRPC protos folder.",
      "defaultValue": "false"
    }
  },
  "primaryOutputs": [
    {
      "path": "Elfland.Dapr.csproj"
    }
  ],
  "defaultName": "Elfland.Dapr",
  "postActions": [
    {
      "id": "restore",
      "condition": "(!skipRestore)",
      "description": "Restore NuGet packages required by this project.",
      "manualInstructions": [
        {
          "text": "Run 'dotnet restore'"
        }
      ],
      "actionId": "210D431B-A78B-4D2F-B762-4ED3E3EA9025",
      "continueOnError": true
    },
    {
      "id": "git",
      "condition": "(git)",
      "description": "Initialize this project as a repo.",
      "manualInstructions": [
        {
          "text": "Run 'git init'"
        }
      ],
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "args": {
        "executable": "git",
        "args": "init"
      },
      "continueOnError": true
    },
    {
      "id": "installEntityFrameworkCore",
      "condition": "(ef)",
      "description": "Install dotnet-ef.",
      "manualInstructions": [
        {
          "text": "Run 'dotnet tool install --global dotnet-ef'"
        }
      ],
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "args": {
        "executable": "dotnet",
        "args": "tool install --global dotnet-ef"
      },
      "continueOnError": true
    },
    {
      "id": "installCodeFormatter",
      "condition": "(formatter)",
      "description": "Install CSharpier as code formatter.",
      "manualInstructions": [
        {
          "text": "Run 'dotnet tool install --global csharpier'"
        }
      ],
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "args": {
        "executable": "dotnet",
        "args": "tool install --global csharpier"
      },
      "continueOnError": true
    },
    {
      "id": "autoFormat",
      "condition": "(formatter)",
      "description": "Auto format code with CSharpier after creating the project.",
      "manualInstructions": [
        {
          "text": "Run 'dotnet csharpier .'"
        }
      ],
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "args": {
        "executable": "dotnet",
        "args": "csharpier ."
      },
      "continueOnError": true
    }
  ]
}